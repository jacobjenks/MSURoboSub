<?xml version="1.0"?>


<!-- Launch file to start msurobosub modules -->
<!-- Example launch files can be seen at github.com/bluerobotics/bluerov-ros-pkg/ -->

<launch>

	<!-- -->
	<!-- Parameters -->
	<param name="robot_description" command="cat $(find msurobosub)/robosub_model.urdf" />

	<!-- -->
	<!-- Nodes -->

	<!-- Arduino relay  -->
	<node respawn="true" pkg="rosserial_python" type="serial_node.py" name="arduino">
		<param name="port" value="/dev/ttyACM0"/>
	</node>

	<!-- IMU data -->
	<node respawn="true" pkg="msurobosub" type="imu.py" name="imu">
	</node>

	<!-- Camera data -->

	<node pkg="cv_camera" type="cv_camera_node" ns="sensors" name="camF">
		<param name="device_id" value="0"/>
		<param name="frame_id" value="sensor_msgs/camF"/>
		<param name="image_width" value="640"/>
		<param name="image_height" value="480"/>
	</node>
 
	<node pkg="cv_camera" type="cv_camera_node" ns="sensors/stereo_bot/" name="left">
		<param name="device_id" value="1"/>
		<param name="frame_id" value="camDL"/>
		<param name="image_width" value="640"/>
		<param name="image_height" value="480"/>
		<param name="camera_info_url" value="package://msurobosub/calibration/left.yaml"/>
	</node>
 
	<node pkg="cv_camera" type="cv_camera_node" ns="sensors/stereo_bot/" name="right">
		<param name="device_id" value="2"/>
		<param name="frame_id" value="camDR"/>
		<param name="image_width" value="640"/>
		<param name="image_height" value="480"/>
		<param name="camera_info_url" value="package://msurobosub/calibration/left.yaml"/>
	</node>

	<!-- State publisher -->
	<!--<node pkg="robot_state_publisher" type="robot_state_publisher" name="rob_st_pub" >
	</node>-->

	<!-- Static transforms -->
	<node pkg="tf2_ros" type="static_transform_publisher" name="odom_broadcaster" args="0 0 0 0 0 0 1 map odom"/>
	<node pkg="tf2_ros" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 1 odom base_link"/>
	<node pkg="tf2_ros" type="static_transform_publisher" name="imu0_broadcaster" args="0 0 0 1 0 0 1 base_link imu0"/>

	<!-- State estimate for the robot given IMU data -->
	<!-- wiki.ros.org/robot_localization -->
	<node respawn="true" pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_node">
		<param name="frequency" value="100"/> 			<!-- Number of state estimations per second -->
		<param name="sensor_timeout" value=".1"/>		<!-- Seconds to wait before making state estimation without reading -->
		<param name="transform_time_offset" value="0.0"/>
		<param name="two_d_mode" value="false"/>
		<param name="print_diagnostics" value="true"/>
		<param name="debug" value="false"/>
		<param name="map_frame" value="map"/>
		<param name="odom_frame" value="odom"/>
		<param name="base_link_frame" value="base_link"/>
		<param name="world_frame" value="odom"/>
		<!--<param name="use_control" value="false"/>-->
		<param name="imu0" value="sensors/imu"/> 	  <!-- Topic name for IMU data -->
		<rosparam param="imu0_config">[false, false, false,<!-- Which state variables to from IMU to fuse -->
true, true, true,
false, false, false,
false, false, false,
true, true, true]</rosparam>
		<param name="imu0_queue_size" value="2"/>
		<param name="imu0_differential" value="false"/>
		<param name="imu0_relative" value="true"/>
		<param name="imu0_remove_gravitational_acceleration" value="true"/>
	</node>

	<!-- Keyboard input -->
	<node respawn="true" pkg="keyboard" type="keyboard" name="keyboard">
	</node> 

	<node respawn="true" pkg="msurobosub" type="userInput.py" name="user_input">
	</node>

	<!-- World modeling -->
	<node pkg="hector_object_tracker" type="object_tracker" name="object_tracker" output="screen">
      <param name="angle_variance" type="double" value="0.121846968"/>
      <param name="distance_variance" type="double" value="1"/>
      <param name="publish_interval" type="double" value="1.0" />

      <rosparam>
        buoy:
          pending_support: 1.0
          active_support: 10.0
          marker_color: [0.8, 0.0, 0.0]
          with_orientation: true
          min_distance_between_objects: 0.3
        validation_gate:
          pending_support: 1.0
          active_support: 10.0
          marker_color: [0.8, 0.0, 0.0]
          with_orientation: true
          min_distance_between_objects: 0.3
        gate:
          pending_support: 1.0
          active_support: 10.0
          marker_color: [0.8, 0.0, 0.0]
          with_orientation: true
          min_distance_between_objects: 0.3
        bin:
          pending_support: 1.0
          active_support: 10.0
          marker_color: [0.8, 0.0, 0.0]
          with_orientation: true
          min_distance_between_objects: 0.01
        torpedo_target:
          pending_support: 1.0
          active_support: 10.0
          marker_color: [0.8, 0.0, 0.0]
          with_orientation: true
          min_distance_between_objects: 0.3
        pinger:
          pending_support: 1.0
          active_support: 10.0
          marker_color: [0.8, 0.0, 0.0]
          with_orientation: true
          min_distance_between_objects: 0.3
        <!--
        verification_services:
          - service: object_verification/verify_object
            type: object
            class_id: victim
            ignore: true
          - service: object_verification/verify_percept
            type: percept
            class_id: victim
            required: true
        negative_update:
          - topic: thermal/camera_info
            class_id: victim
            min_distance: 0.1
            max_distance: 1.6
            negative_support: 0.5
        -->
      </rosparam>
      <remap from="visualization_marker" to="worldmodel/visualization_marker" />
      <remap from="visualization_marker_array" to="worldmodel/visualization_marker_array" />
    </node>

</launch>
